1.ArrayList，Vector，LinkedList的区别
ArrayList和Vector本质都是对象数组，查找快，插入删除都会导致元素的移动，效率低；ArrayList缺省情况下数组长度自动增长为原来的50%，Vector自动增长为原来的2倍；ArrayList是非同步的，Vector的方法是同步的，所有效率上来说ArrayList要高于Vector，但是Vector线程安全；
LinkedList本质上是双向循环列表，查找要从头开始顺序查找，比较慢，但是插入和删除效率高，是非同步的；
2.HashMap和HashTable的区别
HashMap本质上是数组+链表实现的，数组就是Entry数组，通过Entry的next进行链接
HashMap继承自AbstractMap，HashTable继承自Dictionary
HashMap允许key和value为null，HashTable不允许
HashMap是非同步的，HashTable是同步的，所有在效率上HashMap高于HashTable
Put()方法的执行过程：
先利用key的hashCode()方法然后计算出key的hash值，根据hash值利用indexFor()计算出该键值对存储的位置table[i]，如果在table[i]的位置有相同的key，则用value代替原来的value，没有的话就将该键值对插入到table[i]的第一个元素，其他元素后移
Get()方法的执行过程：
先利用key算出hash值找到对应的table[i]，然后从第一个元素开始遍历链表直到找到该key，然后返回
3.不用中间变量实现swap(x,y)函数
用异或运算，0^0=0,1^1=0,0^1=1,1^0=1,一个变量a连续异或2次另一个变量b其值不变(相当于翻转2次)，a=1010,b=1001,a^b=0011,(a^b)^b=0011^1001=1010=a
所以swap(x,y){
	int a=1010;
int b=1001;
a=a^b;
b=a^b;
a=a^b;
}
4.同步方法和同步方法块的区别
http://topmanopensource.iteye.com/blog/1738178
1）	线程同步的目的是为了保护多个线程反问一个资源时对资源的破坏
2）	线程同步方法是通过锁来实现，每个对象都有切仅有一个锁，这个锁与一个特定的对象关联，线程一旦获取了对象锁，其他访问该对象的线程就无法再访问该对象的其他同步方法。也就是说，其他对象还是可以访问该对象的同步方法
3）	所有的非静态同步方法用的都是同一把锁——实例对象本身
4）	所有的静态同步方法用的也是同一把锁——类对象本身，这两把锁是两个不同的对象，所以静态同步方法与非静态同步方法之间是不会有竞态条件的
5）	同步方法和同步方法块都是获取对象锁，但是同步代码块需要指定获取哪个对象的锁，代码如下:
当然，同步方法也可以改写为非同步方法，但功能完全一样的，例如：
public synchronized int getX() {//同步方法，整个方法都是同步的
        return x++;
    }
与
public int getX() {//同步代码块
        synchronized (this) {//需要指定获取哪个对象的锁，只在代码块同步
            return x;
        }
    }
效果是完全一样的
6）	静态方法同步
public static synchronized int setName(String name){
      Xxx.name = name;
}
等价于
public static int setName(String name){
      synchronized(Xxx.class){//静态方法是获取类的锁
            Xxx.name = name;
      }
}
5.JDBC使用方法
详见http://www.cnblogs.com/hongten/archive/2011/03/29/1998311.html
1、加载JDBC驱动程序
在连接数据库之前，首先要加载想要连接的数据库的驱动到JVM（Java虚拟机），这通过java.lang.Class类的静态方法forName(String  className)实现。   
    例如：   
    try{   
   	 //加载MySql的驱动类   
   	 Class.forName("com.mysql.jdbc.Driver") ;   
    }catch(ClassNotFoundException e){   
    	System.out.println("找不到驱动程序类 ，加载驱动失败！");   
    	e.printStackTrace() ;   
    }  
2、提供JDBC连接的URL
String url = "jdbc:mysql://localhost:3306/test" ;
3、创建数据库的连接
要连接数据库，需要向java.sql.DriverManager请求并获得Connection对象，该对象就代表一个数据库的连接。   
    使用DriverManager的getConnection(String url , String username , String password )方法传入指定的欲连接的数据库的路径、数据库的用户名和密码来获得。   
     例如：   
     //连接MySql数据库，用户名和密码都是root   
     String url = "jdbc:mysql://localhost:3306/test" ;    
     String username = "root" ;   
     String password = "root" ;   
     try{   
    Connection con = DriverManager.getConnection(url , username , password ) ;   
     }catch(SQLException se){   
    	System.out.println("数据库连接失败！");   
   	se.printStackTrace() ;   
  } 
4、创建一个Statement
要执行SQL语句，必须获得java.sql.Statement实例，Statement实例分为以下3 种类型：   
      1、执行静态SQL语句。通常通过Statement实例实现。   
      2、执行动态SQL语句。通常通过PreparedStatement实例实现。   
      3、执行数据库存储过程。通常通过CallableStatement实例实现。   
    具体的实现方式：   
        Statement stmt = con.createStatement() ;   
       PreparedStatement pstmt = con.prepareStatement(sql) ;   
       CallableStatement cstmt =    
                            con.prepareCall("{CALL demoSp(? , ?)}") ; 
5、执行SQL语句  
Statement接口提供了三种执行SQL语句的方法：executeQuery 、executeUpdat和execute  
ResultSet rs = stmt.executeQuery("SELECT * FROM ...") ;   
int rows = stmt.executeUpdate("INSERT INTO ...") ;   
boolean flag = stmt.execute(String sql) ;
6、处理结果
while(rs.next()){   
         String name = rs.getString("name") ;   
    String pass = rs.getString(1) ; // 此方法比较高效   
     }  
7、关闭JDBC对象 
 
6.try-catch-finally中return的执行顺序
 
7.Hibernate的一级缓存和二级缓存
http://www.cnblogs.com/xiaoluo501395377/p/3377604.html
http://zhidao.baidu.com/link?url=O4wB7AqXb9iXSoJ3ev7OfpoZivCJCojm0QmN33B39_B40Xdg9tZuh9xmR0AYJhXkrGj9Gc9PEWEctcpo1FOwha
http://www.cnblogs.com/wean/archive/2012/05/16/2502724.html
8.Hibernate延迟加载
http://superleo.iteye.com/blog/243322/
9.spring事务管理
http://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/
http://blog.csdn.net/ocean1010/article/details/6548771
10.http
11.https
http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html

12.守护线程
http://blog.csdn.net/shimiso/article/details/8964414
13.mysql性能优化
1. 为查询缓存优化你的查询 
	大多数的MySQL服务器都开启了查询缓存，但是我们某些查询语句会让MySQL不使用缓存。
// 查询缓存不开启 
$r = mysql_query("SELECT username FROM user WHERE signup_date >= CURDATE()"); 

// 开启查询缓存 
$today = date("Y-m-d"); 
$r = mysql_query("SELECT username FROM user WHERE signup_date >= '$today'"); 
像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是不定的易变的。用一个变量来代替MySQL的函数，从而开启缓存。
2. EXPLAIN 你的 SELECT 查询
使用 EXPLAIN 关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。 

EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的……等等，等等。
3. 当只要一行数据时使用 LIMIT 1 
当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。 

在这种情况下，加上 LIMIT 1 可以增加性能。这样一样，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。
4. 为搜索字段建索引
索引并不一定就是给主键或是唯一的字段。如果在你的表中，有某个字段你总要会经常用来做搜索，那么，请为其建立索引吧。
但是有些时候即使查询时使用的是索引，但索引并没有起作用。比如使用了LIKE关键字进行查询时，如果匹配字符串的第一个字符为‘%’，索引不会被使用。如果‘%’不是在第一个位置，索引就会被使用。
5. 避免 SELECT * 
6. 尽可能的使用 NOT NULL
7.  固定长度的表会更快 
8. 垂直分割 
示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。 

示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户 ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。
9. 选择正确的存储引擎 
在 MySQL 中有两个存储引擎 MyISAM 和 InnoDB，每个引擎都有利有弊。
MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。 

InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。 
10. 优化子查询
 很多查询中需要使用子查询。子查询可以使查询语句很灵活，但子查询的执行效率不高。MySQL需要为内层查询语句的查询结果建立一个临时表。然后外层查询语句在临时表中查询记录。查询完毕后，MySQL需要插销这些临时表。所以在MySQL中可以使用连接查询来代替子查询。连接查询不需要建立临时表，其速度比子查询要快。
14.concurrent包
http://www.cnblogs.com/huangfox/archive/2012/08/16/2642666.html
http://www.cnblogs.com/riskyer/p/3263032.html
15.java内存模型
http://blog.csdn.net/ccit0519/article/details/11241403
16.网站性能优化
http://blog.itpub.net/7311285/viewspace-97
1.Html静态化
2.图片服务器分离
3.数据库集群或分库分表
4.缓存
5.镜像
6.负载均衡
(1)http重定向
(2)DNS负载均衡
(3)反向代理负载均衡
(4)IP负载均衡
6.1硬件四层交换
6.2软件四层交换
17.Spring security的原理
 
18.spring 中bean的生命周期
  
19.Java高精度运算
http://swiftlet.net/archives/tag/java-biginteger
20.分布式一致性保证
21.并发缓存Memcache
http://kb.cnblogs.com/page/42731/
缺点
22.Java内存泄露原因
数据库索引 联合索引顺序 聚集索引 非聚集索引
Jdbc事务
CDN
数据库角度一致性保证
传输过程正确性完整性(md5，数字签名)
Java泛型 在不在字节码里面存在
Session cookie的区别，chrome 80k 其他4k cookie ie6 20个 其他50个
